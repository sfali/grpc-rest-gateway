package com.improving
package grpc_rest_gateway
package compiler
package akka_pekko

import com.google.protobuf.Descriptors.ServiceDescriptor
import com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse
import compiler.utils.{Formatter, GenerateDelegateFunctions, GenerateImportStatements}
import scalapb.compiler.FunctionalPrinter.PrinterEndo
import scalapb.compiler.{DescriptorImplicits, FunctionalPrinter}

class GatewayHandlerPrinter(packageNamePrefix: String, service: ServiceDescriptor, implicits: DescriptorImplicits)
    extends HandlerPrinter {
  import implicits.*

  private val extendedFileDescriptor = ExtendedFileDescriptor(service.getFile)
  private val serviceName = service.getName
  private val specificationName = getProtoFileName(extendedFileDescriptor.file.getName)
  private val scalaPackageName = extendedFileDescriptor.scalaPackage.fullName
  private val handlerClassName = serviceName + "GatewayHandler"
  private val clientClasName = s"${serviceName}Client"
  private val outputFileName = scalaPackageName.replace('.', '/') + "/" + handlerClassName + ".scala"
  private val wildcardImport = extendedFileDescriptor.V.WildcardImport
  private val methods = getUnaryCallsWithHttpExtension(service).toList

  lazy val result: CodeGeneratorResponse.File = {
    val b = CodeGeneratorResponse.File.newBuilder()
    b.setName(outputFileName)
    b.setContent(Formatter.format(content))
    b.build()
  }

  private lazy val content =
    new FunctionalPrinter()
      .add("/*", " * Generated by GRPC-REST gateway compiler. DO NOT EDIT.", " */")
      .add(s"package $scalaPackageName")
      .newline
      .add(
        s"import com.improving.grpc_rest_gateway.runtime",
        s"import runtime.core.$wildcardImport",
        s"import runtime.handlers.GrpcGatewayHandler"
      )
      .call(GenerateImportStatements(scalaPackageName, implicits, methods))
      .newline
      .when(packageNamePrefix == "pekko")(_.add("import org.apache.pekko"))
      .add(
        s"import $packageNamePrefix.grpc.GrpcClientSettings",
        s"import $packageNamePrefix.actor.ClassicActorSystemProvider",
        s"import $packageNamePrefix.http.scaladsl.server.Route",
        s"import $packageNamePrefix.http.scaladsl.server.Directives.$wildcardImport"
      )
      .newline
      .add(
        "import scala.concurrent.ExecutionContext",
        "import scala.util.Try"
      )
      .newline
      .call(generateService)
      .newline
      .call(generateCompanionObject)
      .result()

  private def generateService: PrinterEndo =
    _.add(s"class $handlerClassName(settings: GrpcClientSettings)(implicit sys: ClassicActorSystemProvider)")
      .indent
      .add("extends GrpcGatewayHandler {")
      .outdent
      .newline
      .indent
      .add("private implicit val ec: ExecutionContext = sys.classicSystem.dispatcher")
      .add(s"private val client = $clientClasName(settings)")
      .add(s"""override val specificationName: String = "$specificationName"""")
      .newline
      .call(RouteGenerator(implicits, methods))
      .outdent
      .newline
      .call(GenerateDelegateFunctions(implicits, "completeResponse", methods))
      .add("}")

  private def generateCompanionObject: PrinterEndo = { printer =>
    printer
      .add(s"object $handlerClassName {")
      .newline
      .indent
      .add("def apply(settings: GrpcClientSettings)(implicit sys: ClassicActorSystemProvider): GrpcGatewayHandler = {")
      .indent
      .add(s"new $handlerClassName(settings)")
      .outdent
      .add("}")
      .newline
      .add("def apply(clientName: String)(implicit sys: ClassicActorSystemProvider): GrpcGatewayHandler = {")
      .indent
      .add(s"$handlerClassName(GrpcClientSettings.fromConfig(clientName))")
      .outdent
      .add("}")
      .outdent
      .add("}")
  }
}
